<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>B+ 树基本特性</title>
    <url>/2021/10/24/B+%E6%A0%91%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="磁盘的基本特性"><a href="#磁盘的基本特性" class="headerlink" title="磁盘的基本特性"></a>磁盘的基本特性</h2><p>​        磁盘的最小读写单位是扇区，较早期的磁盘一个扇区是 512 字节。随着磁盘技术的发展，<br>目前常见的磁盘扇区是 4K 个字节。操作系统一次会读写多个扇区，所以操作系统的最小读<br>写单位是块（Block），也叫作簇（Cluster）。当我们要从磁盘中读取一个数据时，操作系<br>统会一次性将整个块都读出来。因此，对于大批量的顺序读写来说，磁盘的效率会比随机读<br>写高许多。 </p>
<h2 id="B-树的数据结构特性"><a href="#B-树的数据结构特性" class="headerlink" title="B+ 树的数据结构特性"></a>B+ 树的数据结构特性</h2><ul>
<li><p>让一个节点的大小等于一个块的大小。节点内存储的数据，不<br>是一个元素，而是一个可以装 m 个元素的有序数组。这样一来，我们就可以将磁盘一次读<br>取的数据全部利用起来，使得读取效率最大化。  </p>
</li>
<li><p>将所有的节点分为内部节点和叶子节点，即索引和数据分离。尽管内部节点和叶子<br>节点的数据结构是一样的，但存储的内容是不同的 ；                                                                                                       内部节点仅存储 key 和维持树形结构的指针，并不存储 key 对应的数据（无论是具体数据<br>还是文件位置信息）。这样内部节点就能存储更多的索引数据，我们也就可以使用最少的内<br>部节点，将所有数据组织起来了。而叶子节点仅存储 key 和对应数据，不存储维持树形结<br>构的指针。通过这样的设计，B+ 树就能做到节点的空间利用率最大化。  </p>
</li>
<li><p>B+ 树还将同一层的所有节点串成了有序的双向链表，这样一来，B+ 树就同时具备<br>了良好的<strong>范围查询</strong>能力和灵活调整的能力了  </p>
</li>
<li><p>B+ 树是一棵完全平衡的 m 阶多叉树。所谓的 m 阶，指的是每个节点最多有 m 个<br>子节点，并且每个节点里都存了一个紧凑的可包含 m 个元素的数组。  </p>
<p><img src="/2021/10/24/B+%E6%A0%91%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/b+tree.png"></p>
</li>
</ul>
<p>​    这样的结构，使得 B+ 树可以作为一个完整的文件全部存储在磁盘中。当从根节点开始查询<br>时，通过一次磁盘访问，我们就能将文件中的根节点这个数据块读出，然后在根节点的有序<br>数组中进行二分查找。  </p>
<p>​    B+ 树是一棵完全平衡的 m 阶多叉树。所以，B+ 树的一个节点就能存储一<br>个包含 m 个元素的数组，这样的话，一个只有 2 到 4 层的 B+ 树，就能索引数量级非常大<br>的数据了，因此 B+ 树的层数往往很矮。比如说，一个 4K 的节点的内部可以存储 400 个<br>元素，那么一个 4 层的 B+ 树最多能存储 400^4，也就是 256 亿个元素。  </p>
<p>​     不过，因为 B+ 树只有 4 层，这就意味着我们最多只需要读取 4 次磁盘就能到达叶子节<br>点。并且，我们还可以通过将上面几层的内部节点全部读入内存的方式，来降低磁盘读取的<br>次数。  </p>
<p>​    比如说，对于一个 4 层的 B+ 树，每个节点大小为 4K，那么第一层根节点就是 4K，第二<br>层最多有 400 个节点，一共就是 1.6M；第三层最多有 400^2，也就是 160000 个节点，<br>一共就是 640M。对于现在常见的计算机来说，前三层的内部节点其实都可以存储在内存<br>中，只有第四层的叶子节点才需要存储在磁盘中。这样一来，我们就只需要读取一次磁盘即<br>可。这也是为什么，B+ 树要将内部节点和叶子节点区分开的原因。通过这种只让内部节点<br>存储索引数据的设计，我们就能更容易地把内部节点全部加载到内存中了。  </p>
<p>B+ 树的新增和插入操作会引起页分裂，对性能有一定影响，总体来讲，B+ 树的插入、删除、查找的平均复杂度为O(logN)。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎核心流程</title>
    <url>/2021/10/20/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>background</p>
<p>搜索引擎核心流程分析</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
